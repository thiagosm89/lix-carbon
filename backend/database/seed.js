const db = require('./db');
const bcrypt = require('bcryptjs');
const { v4: uuidv4 } = require('uuid');

const seedDatabase = async () => {
  console.log('üå± Iniciando seed do banco de dados...');

  try {
    // Verificar se j√° existem dados
    const userCount = await db.getAsync('SELECT COUNT(*) as count FROM users');
    if (userCount && userCount.count > 0) {
      console.log('‚ö†Ô∏è  Banco j√° possui dados. Pulando seed...');
      return;
    }

    console.log('üìù Inserindo usu√°rios...');
    
    // Inserir usu√°rios
    const users = [
      {
        id: '1',
        nome: 'EcoEmpresas Ltda',
        cnpj: '12.345.678/0001-90',
        email: 'contato@ecoempresas.com',
        senha: bcrypt.hashSync('empresa123', 10),
        role: 'USUARIO',
        endereco: 'Rua Verde, 123 - S√£o Paulo',
        telefone: '(11) 98765-4321',
        criadoEm: '2024-01-15T00:00:00Z'
      },
      {
        id: '2',
        nome: 'GreenTech Solu√ß√µes',
        cnpj: '98.765.432/0001-10',
        email: 'contato@greentech.com',
        senha: bcrypt.hashSync('validador123', 10),
        role: 'VALIDADOR_CREDITO',
        endereco: 'Av. Sustent√°vel, 456 - Rio de Janeiro',
        telefone: '(21) 91234-5678',
        criadoEm: '2024-01-10T00:00:00Z'
      },
      {
        id: '3',
        nome: 'Administrador LixCarbon',
        cnpj: null,
        email: 'admin@lixcarbon.com',
        senha: bcrypt.hashSync('admin123', 10),
        role: 'ADMINISTRADOR',
        endereco: null,
        telefone: null,
        criadoEm: '2024-01-01T00:00:00Z'
      },
      {
        id: '4',
        nome: 'Natura Ind√∫strias SA',
        cnpj: '11.222.333/0001-44',
        email: 'sustentabilidade@natura.com',
        senha: bcrypt.hashSync('natura123', 10),
        role: 'USUARIO',
        endereco: 'Av. Brasil, 789 - S√£o Paulo',
        telefone: '(11) 3456-7890',
        criadoEm: '2024-02-01T00:00:00Z'
      }
    ];

    for (const user of users) {
      await db.runAsync(`
        INSERT INTO users (id, nome, cnpj, email, senha, role, endereco, telefone, criadoEm)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
      `, [
        user.id,
        user.nome,
        user.cnpj,
        user.email,
        user.senha,
        user.role,
        user.endereco,
        user.telefone,
        user.criadoEm
      ]);
    }

    console.log(`‚úÖ ${users.length} usu√°rios inseridos`);
    console.log('‚ÑπÔ∏è  Usu√°rios iniciam sem registros de lixo (conforme requisito)');

    console.log('üìù Inserindo tokens dispon√≠veis...');

    // Inserir tokens dispon√≠veis
    const tokens = [
      { token: '789012', categoria: 'RECICLAVEL', peso: 180.0, usado: 0 },
      { token: '890123', categoria: 'ORGANICO', peso: 220.0, usado: 0 },
      { token: '901234', categoria: 'RECICLAVEL', peso: 275.5, usado: 0 }
    ];

    for (const token of tokens) {
      await db.runAsync(`
        INSERT INTO available_tokens (token, categoria, peso, usado)
        VALUES (?, ?, ?, ?)
      `, [token.token, token.categoria, token.peso, token.usado]);
    }

    console.log(`‚úÖ ${tokens.length} tokens dispon√≠veis inseridos`);
    console.log('üéâ Seed conclu√≠do com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro ao executar seed:', error);
  }
};

// Executar seed se este arquivo for executado diretamente
if (require.main === module) {
  seedDatabase().then(() => {
    console.log('‚úÖ Seed finalizado');
    process.exit(0);
  }).catch(error => {
    console.error('‚ùå Erro fatal:', error);
    process.exit(1);
  });
}

module.exports = seedDatabase;
